{"version":3,"file":"46abebf9.js","sources":["../../../src/components/account/AccountRecoverForm.client.jsx"],"sourcesContent":["import React from 'react';\n\nexport default function AccountRecoverForm() {\n  const [submitSuccess, setSubmitSuccess] = React.useState(false);\n  const [submitError, setSubmitError] = React.useState(null);\n\n  const [email, setEmail] = React.useState('');\n  const [emailError, setEmailError] = React.useState(null);\n\n  function emailValidation(email) {\n    if (email.validity.valid) return null;\n\n    return email.validity.valueMissing\n      ? 'Please enter an email'\n      : 'Please enter a valid email';\n  }\n\n  async function onSubmit(event) {\n    event.preventDefault();\n\n    setEmailError(null);\n    setSubmitError(null);\n\n    const newEmailError = emailValidation(event.target.email);\n\n    if (newEmailError) {\n      setEmailError(newEmailError);\n      return;\n    }\n\n    await callAccountRecoverApi({\n      email,\n    });\n\n    setEmail('');\n    setSubmitSuccess(true);\n  }\n\n  return (\n    <div className=\"flex justify-center\">\n      <div className=\"max-w-md w-full\">\n        {submitSuccess ? (\n          <>\n            <h1 className=\"text-4xl\">Request Sent.</h1>\n            <p className=\"mt-4\">\n              If that email address is in our system, you will receive an email\n              with instructions about how to reset your password in a few\n              minutes.\n            </p>\n          </>\n        ) : (\n          <>\n            <h1 className=\"text-4xl\">Forgot Password.</h1>\n            <p className=\"mt-4\">\n              Enter the email address associated with your account to recieve a\n              link to reset your password.\n            </p>\n          </>\n        )}\n        <form noValidate className=\"pt-6 pb-8 mt-4 mb-4\" onSubmit={onSubmit}>\n          {submitError && (\n            <div className=\"flex items-center justify-center mb-6 bg-zinc-500\">\n              <p className=\"m-4 text-s text-white\">{submitError}</p>\n            </div>\n          )}\n          <div className=\"mb-4\">\n            <input\n              className={`mb-1 appearance-none border w-full py-2 px-3 text-gray-800 placeholder:text-gray-500 leading-tight focus:shadow-outline ${\n                emailError ? ' border-red-500' : 'border-gray-900'\n              }`}\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"email\"\n              required\n              placeholder=\"Email address\"\n              aria-label=\"Email address\"\n              value={email}\n              onChange={(event) => {\n                setEmail(event.target.value);\n              }}\n            />\n            <p\n              className={`text-red-500 text-xs ${\n                !emailError ? 'invisible' : ''\n              }`}\n            >\n              {emailError} &nbsp;\n            </p>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <button\n              className=\"bg-gray-900 text-white uppercase py-2 px-4 focus:shadow-outline block w-full\"\n              type=\"submit\"\n            >\n              Request Reset Link\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nfunction callAccountRecoverApi({email, password, firstName, lastName}) {\n  return fetch(`/account/recover`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({email, password, firstName, lastName}),\n  })\n    .then((res) => {\n      if (res.status === 200) {\n        return {};\n      } else {\n        return res.json();\n      }\n    })\n    .catch((error) => {\n      return {\n        error: error.toString(),\n      };\n    });\n}\n"],"names":["submitSuccess","setSubmitSuccess","React","useState","submitError","setSubmitError","email","setEmail","emailError","setEmailError","validity","valid","valueMissing","event","preventDefault","newEmailError","emailValidation","target","callAccountRecoverApi","_jsxs","_Fragment","_jsx","value","password","firstName","lastName","fetch","method","headers","Accept","body","JSON","stringify","then","res","status","json","catch","error","toString"],"mappings":"6DAE6C,YAAA,CAC3C,KAAM,CAACA,EAAeC,GAAoBC,EAAMC,SAAS,EAAf,EACpC,CAACC,EAAaC,GAAkBH,EAAMC,SAAS,IAAf,EAEhC,CAACG,EAAOC,GAAYL,EAAMC,SAAS,EAAf,EACpB,CAACK,EAAYC,GAAiBP,EAAMC,SAAS,IAAf,EAEpC,WAAyBG,EAAO,CAC9B,MAAIA,GAAMI,SAASC,MAAc,KAE1BL,EAAMI,SAASE,aAClB,wBACA,4BACL,CAED,iBAAwBC,EAAO,CAC7BA,EAAMC,eAAN,EAEAL,EAAc,IAAD,EACbJ,EAAe,IAAD,EAEd,KAAMU,GAAgBC,EAAgBH,EAAMI,OAAOX,KAAd,EAErC,GAAIS,EAAe,CACjBN,EAAcM,CAAD,EACb,MACD,CAED,KAAMG,GAAsB,CAC1BZ,OAAAA,CADyB,EAI3BC,EAAS,EAAD,EACRN,EAAiB,EAAD,CACjB,CAED,SACE,MAAA,CAAK,UAAU,sBAAf,WACE,MAAA,CAAK,UAAU,kBAAf,SAAA,CACGD,EACCmB,EAAAC,EAAA,CAAA,SACE,CAAAC,EAAA,KAAA,CAAI,UAAU,WAAd,SAAA,eAAA,CAAA,EACAA,EAAA,IAAA,CAAG,UAAU,OAAb,SAAA,wIAAA,CAFF,CAAA,CAAA,CAAA,EASAF,EAAAC,EAAA,CAAA,SACE,CAAAC,EAAA,KAAA,CAAI,UAAU,WAAd,SAAA,kBAAA,CAAA,EACAA,EAAA,IAAA,CAAG,UAAU,OAAb,SAAA,gGAAA,CAFF,CAAA,CAAA,CAAA,EAQFF,EAAA,OAAA,CAAM,WAAN,GAAiB,UAAU,sBAAsB,WAAjD,SAAA,CACGf,GACCiB,EAAA,MAAA,CAAK,UAAU,oDAAf,WACE,IAAA,CAAG,UAAU,wBAAb,SAAsCjB,CAAAA,CAAtC,CAAA,CADF,EAIFe,EAAA,MAAA,CAAK,UAAU,OAAf,SACE,CAAAE,EAAA,QAAA,CACE,UAAY,2HACVb,EAAa,kBAAoB,oBAEnC,GAAG,QACH,KAAK,QACL,KAAK,QACL,aAAa,QACb,SARF,GASE,YAAY,gBACZ,aAAW,gBACX,MAAOF,EACP,SAAWO,AAAU,GAAA,CACVA,EAAAA,EAAMI,OAAOK,KAAd,CACT,CAAA,CAdH,EAgBAH,EAAA,IAAA,CACE,UAAY,wBACV,AAACX,EAA2B,GAAd,cAFlB,SAAA,CAKGA,EALH,OAAA,CAAA,CAjBF,CAAA,CAAA,CAAA,EAyBAa,EAAA,MAAA,CAAK,UAAU,oCAAf,WACE,SAAA,CACE,UAAU,+EACV,KAAK,SAFP,SAAA,oBAAA,CAAA,CAAA,CAhCJ,CAAA,CAAA,CAnBF,CAAA,CAAA,CAAA,CAAA,CAFJ,CAgED,CAED,WAA+B,CAACf,QAAOiB,WAAUC,YAAWC,YAAW,CACrE,MAAOC,OAAO,mBAAmB,CAC/BC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,kBAFT,EAITC,KAAMC,KAAKC,UAAU,CAAC1B,QAAOiB,WAAUC,YAAWC,UAAAA,CAA5C,CAAA,CANI,EAQTQ,KAAMC,AAAQ,GACTA,EAAIC,SAAW,IACV,GAEAD,EAAIE,MAZV,EAeJC,MAAOC,AAAU,GACT,EACLA,MAAOA,EAAMC,SAAN,CAAA,EAjBN,CAoBR"}