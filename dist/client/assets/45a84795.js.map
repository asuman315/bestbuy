{"version":3,"file":"45a84795.js","sources":["../../../node_modules/@shopify/hydrogen/dist/esnext/components/CartProvider/constants.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/CartProvider/CartProvider.client.js","../../../src/components/LocalCartProvider.client.jsx"],"sourcesContent":["export const CART_ID_STORAGE_KEY = 'shopifyCartId';\nexport const CART_COOKIE_TTL_DAYS = 14;\n","import React, { useEffect, useCallback, useReducer, useMemo, useRef, } from 'react';\nimport { flattenConnection } from '../../utilities/flattenConnection';\nimport { CartLineAdd, CartCreate, CartLineRemove, CartLineUpdate, CartNoteUpdate, CartBuyerIdentityUpdate, CartAttributesUpdate, CartDiscountCodesUpdate, CartQuery, defaultCartFragment, } from './cart-queries';\nimport { CountryCode, } from '../../storefront-api-types';\nimport { useCartFetch } from './hooks.client';\nimport { CartContext } from './context';\nimport { CART_ID_STORAGE_KEY } from './constants';\nimport { ClientAnalytics } from '../../foundation/Analytics/ClientAnalytics';\nfunction cartReducer(state, action) {\n    switch (action.type) {\n        case 'cartFetch': {\n            if (state.status === 'uninitialized') {\n                return {\n                    status: 'fetching',\n                };\n            }\n            break;\n        }\n        case 'cartCreate': {\n            if (state.status === 'uninitialized') {\n                return {\n                    status: 'creating',\n                };\n            }\n            break;\n        }\n        case 'resolve': {\n            const resolvableStatuses = ['updating', 'fetching', 'creating'];\n            if (resolvableStatuses.includes(state.status)) {\n                return {\n                    status: 'idle',\n                    cart: action.cart,\n                };\n            }\n            break;\n        }\n        case 'reject': {\n            if (state.status === 'fetching' || state.status === 'creating') {\n                return { status: 'uninitialized', error: action.error };\n            }\n            else if (state.status === 'updating') {\n                return {\n                    status: 'idle',\n                    cart: state.lastValidCart,\n                    error: action.error,\n                };\n            }\n            break;\n        }\n        case 'resetCart': {\n            if (state.status === 'fetching') {\n                return { status: 'uninitialized' };\n            }\n            break;\n        }\n        case 'addLineItem': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: state.cart,\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'removeLineItem': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: {\n                        ...state.cart,\n                        lines: state.cart.lines.filter(({ id }) => !action.lines.includes(id)),\n                    },\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'updateLineItem': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: {\n                        ...state.cart,\n                        lines: state.cart.lines.map((line) => {\n                            const updatedLine = action.lines.find(({ id }) => id === line.id);\n                            if (updatedLine && updatedLine.quantity) {\n                                return {\n                                    ...line,\n                                    quantity: updatedLine.quantity,\n                                };\n                            }\n                            return line;\n                        }),\n                    },\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'noteUpdate': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: state.cart,\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'buyerIdentityUpdate': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: state.cart,\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'cartAttributesUpdate': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: state.cart,\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'discountCodesUpdate': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: state.cart,\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n    }\n    throw new Error(`Cannot dispatch event (${action.type}) for current cart state (${state.status})`);\n}\n/**\n * The `CartProvider` component creates a context for using a cart. It creates a cart object and callbacks\n * that can be accessed by any descendent component using the `useCart` hook and related hooks. It also carries out\n * any callback props when a relevant action is performed. For example, if a `onLineAdd` callback is provided,\n * then the callback will be called when a new line item is successfully added to the cart.\n *\n * The `CartProvider` component must be a descendent of the `ShopifyProvider` component.\n * You must use this component if you want to use the `useCart` hook or related hooks, or if you would like to use the `AddToCartButton` component.\n */\nexport function CartProvider({ children, numCartLines, onCreate, onLineAdd, onLineRemove, onLineUpdate, onNoteUpdate, onBuyerIdentityUpdate, onAttributesUpdate, onDiscountCodesUpdate, data: cart, cartFragment = defaultCartFragment, customerAccessToken, countryCode = CountryCode.Us, }) {\n    const initialStatus = cart\n        ? { status: 'idle', cart: cartFromGraphQL(cart) }\n        : { status: 'uninitialized' };\n    const [state, dispatch] = useReducer((state, dispatch) => cartReducer(state, dispatch), initialStatus);\n    const fetchCart = useCartFetch();\n    const cartFetch = useCallback(async (cartId) => {\n        dispatch({ type: 'cartFetch' });\n        const { data } = await fetchCart({\n            query: CartQuery(cartFragment),\n            variables: {\n                id: cartId,\n                numCartLines,\n                country: countryCode,\n            },\n        });\n        if (!(data === null || data === void 0 ? void 0 : data.cart)) {\n            window.localStorage.removeItem(CART_ID_STORAGE_KEY);\n            dispatch({ type: 'resetCart' });\n            return;\n        }\n        dispatch({ type: 'resolve', cart: cartFromGraphQL(data.cart) });\n    }, [fetchCart, cartFragment, numCartLines, countryCode]);\n    const cartCreate = useCallback(async (cart) => {\n        var _a, _b, _c;\n        dispatch({ type: 'cartCreate' });\n        onCreate === null || onCreate === void 0 ? void 0 : onCreate();\n        if (countryCode && !((_a = cart.buyerIdentity) === null || _a === void 0 ? void 0 : _a.countryCode)) {\n            if (cart.buyerIdentity == null) {\n                cart.buyerIdentity = {};\n            }\n            cart.buyerIdentity.countryCode = countryCode;\n        }\n        if (customerAccessToken && !((_b = cart.buyerIdentity) === null || _b === void 0 ? void 0 : _b.customerAccessToken)) {\n            if (cart.buyerIdentity == null) {\n                cart.buyerIdentity = {};\n            }\n            cart.buyerIdentity.customerAccessToken = customerAccessToken;\n        }\n        const { data, error } = await fetchCart({\n            query: CartCreate(cartFragment),\n            variables: {\n                input: cart,\n                numCartLines,\n                country: countryCode,\n            },\n        });\n        if (error) {\n            dispatch({\n                type: 'reject',\n                error,\n            });\n        }\n        if ((_c = data === null || data === void 0 ? void 0 : data.cartCreate) === null || _c === void 0 ? void 0 : _c.cart) {\n            if (cart.lines) {\n                ClientAnalytics.publish(ClientAnalytics.eventNames.ADD_TO_CART, true, {\n                    addedCartLines: cart.lines,\n                    cart: data.cartCreate.cart,\n                });\n            }\n            dispatch({\n                type: 'resolve',\n                cart: cartFromGraphQL(data.cartCreate.cart),\n            });\n            window.localStorage.setItem(CART_ID_STORAGE_KEY, data.cartCreate.cart.id);\n        }\n    }, [\n        onCreate,\n        countryCode,\n        fetchCart,\n        cartFragment,\n        numCartLines,\n        customerAccessToken,\n    ]);\n    const addLineItem = useCallback(async (lines, state) => {\n        var _a;\n        if (state.status === 'idle') {\n            dispatch({ type: 'addLineItem' });\n            onLineAdd === null || onLineAdd === void 0 ? void 0 : onLineAdd();\n            const { data, error } = await fetchCart({\n                query: CartLineAdd(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    lines,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (error) {\n                dispatch({\n                    type: 'reject',\n                    error,\n                });\n            }\n            if ((_a = data === null || data === void 0 ? void 0 : data.cartLinesAdd) === null || _a === void 0 ? void 0 : _a.cart) {\n                ClientAnalytics.publish(ClientAnalytics.eventNames.ADD_TO_CART, true, {\n                    addedCartLines: lines,\n                    cart: data.cartLinesAdd.cart,\n                });\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartLinesAdd.cart),\n                });\n            }\n        }\n    }, [onLineAdd, fetchCart, cartFragment, numCartLines, countryCode]);\n    const removeLineItem = useCallback(async (lines, state) => {\n        var _a;\n        if (state.status === 'idle') {\n            dispatch({ type: 'removeLineItem', lines });\n            onLineRemove === null || onLineRemove === void 0 ? void 0 : onLineRemove();\n            const { data, error } = await fetchCart({\n                query: CartLineRemove(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    lines,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (error) {\n                dispatch({\n                    type: 'reject',\n                    error,\n                });\n            }\n            if ((_a = data === null || data === void 0 ? void 0 : data.cartLinesRemove) === null || _a === void 0 ? void 0 : _a.cart) {\n                ClientAnalytics.publish(ClientAnalytics.eventNames.REMOVE_FROM_CART, true, {\n                    removedCartLines: lines,\n                    cart: data.cartLinesRemove.cart,\n                });\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartLinesRemove.cart),\n                });\n            }\n        }\n    }, [onLineRemove, fetchCart, cartFragment, numCartLines, countryCode]);\n    const updateLineItem = useCallback(async (lines, state) => {\n        var _a;\n        if (state.status === 'idle') {\n            dispatch({ type: 'updateLineItem', lines });\n            onLineUpdate === null || onLineUpdate === void 0 ? void 0 : onLineUpdate();\n            const { data, error } = await fetchCart({\n                query: CartLineUpdate(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    lines,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (error) {\n                dispatch({\n                    type: 'reject',\n                    error,\n                });\n            }\n            if ((_a = data === null || data === void 0 ? void 0 : data.cartLinesUpdate) === null || _a === void 0 ? void 0 : _a.cart) {\n                ClientAnalytics.publish(ClientAnalytics.eventNames.UPDATE_CART, true, {\n                    updatedCartLines: lines,\n                    oldCart: state.cart,\n                });\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartLinesUpdate.cart),\n                });\n            }\n        }\n    }, [onLineUpdate, fetchCart, cartFragment, numCartLines, countryCode]);\n    const noteUpdate = useCallback(async (note, state) => {\n        var _a;\n        if (state.status === 'idle') {\n            dispatch({ type: 'noteUpdate' });\n            onNoteUpdate === null || onNoteUpdate === void 0 ? void 0 : onNoteUpdate();\n            const { data, error } = await fetchCart({\n                query: CartNoteUpdate(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    note,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (error) {\n                dispatch({\n                    type: 'reject',\n                    error,\n                });\n            }\n            if ((_a = data === null || data === void 0 ? void 0 : data.cartNoteUpdate) === null || _a === void 0 ? void 0 : _a.cart) {\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartNoteUpdate.cart),\n                });\n            }\n        }\n    }, [onNoteUpdate, fetchCart, cartFragment, numCartLines, countryCode]);\n    const buyerIdentityUpdate = useCallback(async (buyerIdentity, state) => {\n        var _a;\n        if (state.status === 'idle') {\n            dispatch({ type: 'buyerIdentityUpdate' });\n            onBuyerIdentityUpdate === null || onBuyerIdentityUpdate === void 0 ? void 0 : onBuyerIdentityUpdate();\n            const { data, error } = await fetchCart({\n                query: CartBuyerIdentityUpdate(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    buyerIdentity,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (error) {\n                dispatch({\n                    type: 'reject',\n                    error,\n                });\n            }\n            if ((_a = data === null || data === void 0 ? void 0 : data.cartBuyerIdentityUpdate) === null || _a === void 0 ? void 0 : _a.cart) {\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartBuyerIdentityUpdate.cart),\n                });\n            }\n        }\n    }, [onBuyerIdentityUpdate, fetchCart, cartFragment, numCartLines, countryCode]);\n    const cartAttributesUpdate = useCallback(async (attributes, state) => {\n        var _a;\n        if (state.status === 'idle') {\n            dispatch({ type: 'cartAttributesUpdate' });\n            onAttributesUpdate === null || onAttributesUpdate === void 0 ? void 0 : onAttributesUpdate();\n            const { data, error } = await fetchCart({\n                query: CartAttributesUpdate(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    attributes,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (error) {\n                dispatch({\n                    type: 'reject',\n                    error,\n                });\n            }\n            if ((_a = data === null || data === void 0 ? void 0 : data.cartAttributesUpdate) === null || _a === void 0 ? void 0 : _a.cart) {\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartAttributesUpdate.cart),\n                });\n            }\n        }\n    }, [onAttributesUpdate, fetchCart, cartFragment, numCartLines, countryCode]);\n    const discountCodesUpdate = useCallback(async (discountCodes, state) => {\n        var _a;\n        if (state.status === 'idle') {\n            dispatch({ type: 'discountCodesUpdate' });\n            onDiscountCodesUpdate === null || onDiscountCodesUpdate === void 0 ? void 0 : onDiscountCodesUpdate();\n            const { data, error } = await fetchCart({\n                query: CartDiscountCodesUpdate(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    discountCodes,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (error) {\n                dispatch({\n                    type: 'reject',\n                    error,\n                });\n            }\n            if ((_a = data === null || data === void 0 ? void 0 : data.cartDiscountCodesUpdate) === null || _a === void 0 ? void 0 : _a.cart) {\n                ClientAnalytics.publish(ClientAnalytics.eventNames.DISCOUNT_CODE_UPDATED, true, {\n                    updatedDiscountCodes: discountCodes,\n                    cart: data.cartDiscountCodesUpdate.cart,\n                });\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartDiscountCodesUpdate.cart),\n                });\n            }\n        }\n    }, [onDiscountCodesUpdate, fetchCart, cartFragment, numCartLines, countryCode]);\n    const didFetchCart = useRef(false);\n    useEffect(() => {\n        if (localStorage.getItem(CART_ID_STORAGE_KEY) &&\n            state.status === 'uninitialized' &&\n            !didFetchCart.current) {\n            didFetchCart.current = true;\n            cartFetch(localStorage.getItem(CART_ID_STORAGE_KEY));\n        }\n    }, [cartFetch, state]);\n    useEffect(() => {\n        if (state.status !== 'idle') {\n            return;\n        }\n        buyerIdentityUpdate({ countryCode, customerAccessToken }, state);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [countryCode, customerAccessToken]);\n    const cartContextValue = useMemo(() => {\n        var _a, _b;\n        return {\n            ...('cart' in state\n                ? state.cart\n                : {\n                    lines: [],\n                    attributes: [],\n                    ...(cart ? cartFromGraphQL(cart) : {}),\n                }),\n            status: state.status,\n            error: 'error' in state ? state.error : undefined,\n            totalQuantity: 'cart' in state ? (_b = (_a = state === null || state === void 0 ? void 0 : state.cart) === null || _a === void 0 ? void 0 : _a.totalQuantity) !== null && _b !== void 0 ? _b : 0 : 0,\n            cartCreate,\n            linesAdd(lines) {\n                if ('cart' in state && state.cart.id) {\n                    addLineItem(lines, state);\n                }\n                else {\n                    cartCreate({ lines });\n                }\n            },\n            linesRemove(lines) {\n                removeLineItem(lines, state);\n            },\n            linesUpdate(lines) {\n                updateLineItem(lines, state);\n            },\n            noteUpdate(note) {\n                noteUpdate(note, state);\n            },\n            buyerIdentityUpdate(buyerIdentity) {\n                buyerIdentityUpdate(buyerIdentity, state);\n            },\n            cartAttributesUpdate(attributes) {\n                cartAttributesUpdate(attributes, state);\n            },\n            discountCodesUpdate(discountCodes) {\n                discountCodesUpdate(discountCodes, state);\n            },\n            cartFragment,\n        };\n    }, [\n        state,\n        cart,\n        cartCreate,\n        cartFragment,\n        addLineItem,\n        removeLineItem,\n        updateLineItem,\n        noteUpdate,\n        buyerIdentityUpdate,\n        cartAttributesUpdate,\n        discountCodesUpdate,\n    ]);\n    return (React.createElement(CartContext.Provider, { value: cartContextValue }, children));\n}\nfunction cartFromGraphQL(cart) {\n    var _a;\n    return {\n        ...cart,\n        // @ts-expect-error While the cart still uses fragments, there will be a TS error here until we remove those fragments and get the type in-line\n        lines: flattenConnection(cart.lines),\n        note: (_a = cart.note) !== null && _a !== void 0 ? _a : undefined,\n    };\n}\n","import {useCallback} from 'react';\nimport {CartProvider as ShopifyCartProvider} from '@shopify/hydrogen';\n\nimport CartUIProvider, {useCartUI} from './CartUIProvider.client';\n\n/**\n * A client component that creates a cart object and provides callbacks that can be accessed by any descendent component using the `useCart` hook and related hooks\n */\nexport default function LocalCartProvider({\n  children,\n  numCartLines,\n  customerAccessToken,\n}) {\n  return (\n    <CartUIProvider>\n      <Provider\n        numCartLines={numCartLines}\n        customerAccessToken={customerAccessToken}\n      >\n        {children}\n      </Provider>\n    </CartUIProvider>\n  );\n}\n\nfunction Provider({children, numCartLines, customerAccessToken}) {\n  const {openCart} = useCartUI();\n\n  const open = useCallback(() => {\n    openCart();\n  }, [openCart]);\n\n  return (\n    <>\n      <ShopifyCartProvider\n        customerAccessToken={customerAccessToken}\n        numCartLines={numCartLines}\n        onLineAdd={open}\n        onCreate={open}\n      >\n        {children}\n      </ShopifyCartProvider>\n    </>\n  );\n}\n"],"names":["state","action","type","status","resolvableStatuses","includes","cart","error","lastValidCart","lines","filter","id","map","line","updatedLine","find","quantity","Error","children","numCartLines","onCreate","onLineAdd","onLineRemove","onLineUpdate","onNoteUpdate","onBuyerIdentityUpdate","onAttributesUpdate","onDiscountCodesUpdate","data","cartFragment","defaultCartFragment","customerAccessToken","countryCode","CountryCode","Us","initialStatus","cartFromGraphQL","dispatch","useReducer","cartReducer","fetchCart","useCartFetch","cartFetch","useCallback","cartId","query","CartQuery","variables","country","window","localStorage","removeItem","CART_ID_STORAGE_KEY","cartCreate","_a","_b","_c","buyerIdentity","CartCreate","input","ClientAnalytics","publish","eventNames","ADD_TO_CART","addedCartLines","setItem","addLineItem","CartLineAdd","cartLinesAdd","removeLineItem","CartLineRemove","cartLinesRemove","REMOVE_FROM_CART","removedCartLines","updateLineItem","CartLineUpdate","cartLinesUpdate","UPDATE_CART","updatedCartLines","oldCart","noteUpdate","note","CartNoteUpdate","cartNoteUpdate","buyerIdentityUpdate","CartBuyerIdentityUpdate","cartBuyerIdentityUpdate","cartAttributesUpdate","attributes","CartAttributesUpdate","discountCodesUpdate","discountCodes","CartDiscountCodesUpdate","cartDiscountCodesUpdate","DISCOUNT_CODE_UPDATED","updatedDiscountCodes","didFetchCart","useRef","useEffect","getItem","current","cartContextValue","useMemo","undefined","totalQuantity","linesAdd","linesRemove","linesUpdate","_jsx","flattenConnection","openCart","useCartUI","open","_Fragment","ShopifyCartProvider"],"mappings":"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"}